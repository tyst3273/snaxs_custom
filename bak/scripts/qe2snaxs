#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed May 22 15:00:51 2019

@author: ty

For usage, run './q2snaxs help'.

This program converts a FORCE_SETS file created by phonopy using the --qe 
Quantum ESPRESSO calculator interface into one usable by SNAXS.

phonopy output files using the --qe option have units d = Borh and F = Ry/Bohr.

SNAXS calls phonopy assuming that the force files are those that VASP would have 
produces; i.e. d = Angstrom and F = eV/Angstrom.

All this program does is read an input file, convert the data, and write an output file.
I mainly wrote this to practice implementing some Python functionality I had never used 
before.
"""
from shutil import copyfile as cp
import os
import sys
import numpy as np
infile = 'FORCE_SETS.template'

#if len(sys.argv) == 1:
#   sys.exit('\n\tUSAGE ERROR: qe2snaxs requires exactly 1 argument.\n'
#            '\tTry running \"./qe2snaxs help\" to see options\n')
#elif len(sys.argv) > 2:
#   sys.exit('\n\tUSAGE ERROR: qe2snaxs requires exactly 1 argument.\n'
#            '\tTry running \"./qe2snaxs help\" to see options\n')
#elif sys.argv[1] == 'help':
#   sys.exit('\n\tUSAGE: qe2snaxs infile\n\tinfile is the forcesets file produced '
#            'by Quantum ESPRESSO.\n\tUnits are d = Bohr and F = '
#            'Ry/Bohr. Output file \'FORCE_SETS\'\n\thas units d = Ang and F = '
#            'eV/Ang\n')
#
#infile = sys.argv[1]
#
#if not os.path.isfile(infile):
#   sys.exit('\n\tERROR: '+infile+' not found\n')
#if infile == 'FORCE_SETS' or os.path.isfile('FORCE_SETS'):
#   print('\n\tWARNING: This program overwrites \'FORCE_SETS\'\n\tBacking up '
#         '\'FORCE_SETS\' file to \'FORCE_SETS.bak\'\n')
#   cp('FORCE_SETS','FORCE_SETS.bak')
#   os.remove('FORCE_SETS')
#   if infile == 'FORCE_SETS':
#      infile = 'FORCE_SETS.bak'
      
outfile = 'FORCE_SETS' 

with open(outfile,'w') as w:
   with open(infile) as r:
      tmp = r.readline()
      nat = int(tmp.strip())  # number of atoms in each block of data
      w.write(tmp)
      tmp = r.readline()
      ndisp = int(tmp.strip())   # number of block of data
      w.write(tmp)
      
      for j in range(ndisp):  # loop over blocks of data
         for i in range(2):   # skip the comment lines
            w.write(r.readline())
         tmp = np.array(r.readline().strip().split()).astype(float)*0.529177
         w.write('\t{}\t{}\t{}\n'.format(tmp[0],tmp[1],tmp[2]))   # displacements
         for i in range(nat): # loop over atoms in each block
            tmp = np.array(r.readline().strip().split()).astype(float)*25.711043
            w.write('\t{}\t{}\t{}\n'.format(tmp[0],tmp[1],tmp[2]))   # forces
